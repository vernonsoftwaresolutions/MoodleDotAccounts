AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Model accounts Api Assets

Parameters:

  DNSName:
    Type: String
    Description: Name of Moodle API route 53 entry to use for target

  HostedZoneName:
    Type: String
    Description: Name of existing route 53 hosted zone name

  TableBaseName:
    Type: String
    Description: Name of the base table name for dynamodb

  Stage:
    Type: String
    AllowedValues:
      - dev
      - stage
      - prod
    Default: dev
    Description: Stage that can be added to resource names

Resources:

  AccountsCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub ${Stage}.${DNSName}

  DomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      CertificateArn: !Ref AccountsCertificate
      DomainName: !Sub ${Stage}.${DNSName}

  LambdaDNS:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName:
        Ref: HostedZoneName
      Comment: Zone apex alias targeted to ApiGateway
      RecordSets:
      - Name: !Sub ${Stage}.${DNSName}.
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2 # This is hardcoded for all CloudFormation templates
          DNSName: !GetAtt DomainName.DistributionDomainName

  #API Gateway definition
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionUri: ./accounts-api.yaml
      StageName: !Ref stage
      Variables:
        ServerlessExpressLambdaFunctionName: !GetAtt AccountsHandler.Arn

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "*"
                Resource: "*"
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - "dynamodb:DeleteItem"
            - "dynamodb:GetItem"
            - "dynamodb:PutItem"
            - "dynamodb:Scan"
            - "dynamodb:UpdateItem"
            Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AccountsTable}/*

  # Application assets
  AccountsHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.moodle.account.LambdaHandler
      FunctionName: !Sub AccountsHandler_${Stage}
      MemorySize: 1024
      Runtime: java8
      CodeUri: target/moodle-accounts-1.0.jar
      Timeout: 15
      Environment:
        Variables:
          TABLE_NAME: !Sub ${TableBaseName}_${Stage}
          ENVIRONMENT: !Ref Stage
          POST_TENANT_URL: !Sub https://api.vssdevelopment.com/${Stage}/moodle/tenants
      Role: !GetAtt LambdaRole.Arn
      Events:
        PostResource:
          Type: Api
          Properties:
            RestApiId: !Ref APIGateway
            Path: /{proxy+}
            Method: any

  AccountsHandlerVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName:
        Ref: AccountsHandler
      Description: Most recent published version

#############################################
##  Define Environment Specific API Gateway,
##  Lambda, and Dynamodb resources
#############################################
#  Deployment:
#    Type: AWS::ApiGateway::Deployment
#    Properties:
#      Description: !Sub Deployment for ${Stage}
#      RestApiId: !Ref APIGateway
#      StageName: !Ref Stage

#  ApiGatewayStage:
#    Type: AWS::ApiGateway::Stage
#    Properties:
#      StageName: !Ref Stage
#      RestApiId: !Ref APIGateway
#      DeploymentId: !Ref Deployment
#      Variables:
#        env: !Ref Stage
#      #note-this requires api gateway to have appropriate role
#      MethodSettings:
#        - DataTraceEnabled: true
#          HttpMethod: "*"
#          LoggingLevel: INFO
#          ResourcePath: "/*"
#          MetricsEnabled: true
##
  UrlMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref DomainName
      RestApiId: !Ref APIGateway
      Stage: !Ref Stage

  AccountsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "id"
          AttributeType: "S"
        -
          AttributeName: "email"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "email"
          KeyType: "HASH"
        -
          AttributeName: "id"
          KeyType: "RANGE"
      ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
      TableName: !Sub ${TableBaseName}_${Stage}


Outputs:
  AccountsCertificate:
    Value: !Ref AccountsCertificate

  accountsApiGatewayRef:
    Value: !Ref APIGateway

  AccountsHandlerArn:
    Value: !GetAtt AccountsHandler.Arn
    Export:
      Name: AccountsHandlerArn

  AccountsHandlerVersion:
    Value: !GetAtt AccountsHandlerVersion.Version
    Export:
      Name: AccountsHandlerVersion